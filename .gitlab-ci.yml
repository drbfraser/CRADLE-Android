image: cangol/android-gradle
stages:
  - build
  - test

# Set Gradle home to within the project directory so that we can cache it.
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

# Cache Gradle files.
cache:
  paths:
    - .gradle/wrapper/
    - .gradle/caches/

# run static code analysis
code_analysis:
  stage: build
  script:
    - ./gradlew detekt

# Compile and assemble a debug version of the application.
build:
  stage: build
  script:
    # Remove the current database schema JSON so that it generates a valid one
    - rm app/schemas/com.cradleVSA.neptune.database.CradleDatabase/*.json
    - ./gradlew assembleDebug
    - LATEST_DB_VERSION="$(scripts/get-latest-db-version.sh)"
    - cp "app/schemas/com.cradleVSA.neptune.database.CradleDatabase/$LATEST_DB_VERSION.json" latest_db_version.json
  tags:
    - build
  artifacts:
    paths:
      - latest_db_version.json

# Validate that the database schema JSON actually is the one that's generated by gradle
# These are important for testing database migrations.
validate_database_json:
  # Use a smaller image and don't care about the cache since we're not building.
  image: bitnami/minideb:stretch
  cache: {}
  stage: test
  needs:
    - job: build
      artifacts: true
  script:
    - LATEST_DB_VERSION="$(scripts/get-latest-db-version.sh)"
    - cp latest_db_version.json "$LATEST_DB_VERSION.json"
    - sha256sum -b "$LATEST_DB_VERSION.json" > CHECKSUMS
    - cat CHECKSUMS
    - cp app/schemas/com.cradleVSA.neptune.database.CradleDatabase/$LATEST_DB_VERSION.json .
    - sha256sum -c CHECKSUMS
    - touch SUCCESS
  after_script:
    - LATEST_DB_VERSION="$(scripts/get-latest-db-version.sh)"
    - |
      if [[ ! -f "SUCCESS" ]]; then
        echo "Wrong database schema JSON for current database version: $LATEST_DB_VERSION.json"
        echo "This is normally autogenerated by gradle, and you need to include / update it"
        echo "Generate it by building in Android Studio or by doing ./gradlew build"
        echo "Alternatively, you can get the JSON from the pipeline build artifact."
      fi

# Run local unit tests
test:
  stage: test
  script:
    - ./gradlew test
  artifacts:
    reports:
      junit: app/build/test-results/**/TEST-*.xml
  tags:
    - build
