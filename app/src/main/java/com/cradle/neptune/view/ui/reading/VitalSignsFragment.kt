package com.cradle.neptune.view.ui.reading

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import androidx.databinding.DataBindingComponent
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.observe
import androidx.navigation.Navigation
import com.cradle.neptune.R
import com.cradle.neptune.binding.FragmentDataBindingComponent
import com.cradle.neptune.databinding.FragmentVitalSignsBinding

private const val TAG = "VitalSignsFragment"

/**
 * Allow user to input vital signs, including OCR for data from the photo.
 */
class VitalSignsFragment : BaseFragment() {

    private val dataBindingComponent: DataBindingComponent = FragmentDataBindingComponent()

    // The name "FragmentVitalSignsBinding" is generated by the Data Binding library.
    private var binding: FragmentVitalSignsBinding? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = DataBindingUtil.inflate(
            inflater,
            R.layout.fragment_vital_signs,
            container,
            false,
            dataBindingComponent
        )
        return binding?.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        binding?.lifecycleOwner = viewLifecycleOwner
        binding?.viewModel = viewModel
        super.onViewCreated(view, savedInstanceState)

        view.findViewById<Button>(R.id.cradle_vsa_take_photo_button)?.setOnClickListener(
            Navigation.createNavigateOnClickListener(
                R.id.action_vitalSignsFragment_to_cameraFragment,
                null
            )
        )

        // Required to observe for source updates to come to these LiveData.
        viewModel.bloodPressure.observe(viewLifecycleOwner) {}
        viewModel.urineTest.observe(viewLifecycleOwner) {}
    }

    companion object {
        const val MANUAL_USER_ENTRY_SYSTOLIC = 1
        const val MANUAL_USER_ENTRY_DIASTOLIC = 2
        const val MANUAL_USER_ENTRY_HEARTRATE = 4

        /**
         * OCR
         */
        private const val OCR_DEBUG_IDS_SCALED_IDX = 0
        private const val OCR_DEBUG_IDS_RAW_IDX = 1
        private const val OCR_DEBUG_IDS_TEXT_IDX = 2
    }
}
