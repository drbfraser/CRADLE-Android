package com.cradle.neptune.view.ui.reading

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.core.view.size
import androidx.databinding.DataBindingComponent
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.observe
import com.cradle.neptune.R
import com.cradle.neptune.binding.FragmentDataBindingComponent
import com.cradle.neptune.databinding.FragmentAdviceBinding
import com.cradle.neptune.databinding.ListPreviousReadingsItemBinding
import com.cradle.neptune.model.Reading
import com.cradle.neptune.model.RetestGroup
import com.cradle.neptune.utilitiles.dismissKeyboard
import com.cradle.neptune.view.ReadingActivity
import com.cradle.neptune.viewmodel.ReadingFlowSaveResult
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

@AndroidEntryPoint
class AdviceFragment : BaseFragment() {

    private val dataBindingComponent: DataBindingComponent = FragmentDataBindingComponent()

    // The name "FragmentSymptomsBinding" is generated by the Data Binding library.
    private var binding: FragmentAdviceBinding? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = DataBindingUtil.inflate(
            inflater,
            R.layout.fragment_advice,
            container,
            false,
            dataBindingComponent
        )
        return binding?.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        binding?.apply {
            lifecycleOwner = viewLifecycleOwner
            viewModel = this@AdviceFragment.viewModel
            launchReason = (activity as? ReadingActivity)?.getLaunchReason()
        }
        super.onViewCreated(view, savedInstanceState)

        viewModel.currentValidPatientAndRetestGroup.observe(viewLifecycleOwner) {
            it ?: return@observe

            setupCurrentReadingSummaryLayout(view, it.first, it.second)
            setupPreviousRetestGroupLayout(view, it.first, it.second)
        }

        // Required for updates to come to these MediatorLiveData.
        viewModel.isFlaggedForFollowUp.observe(viewLifecycleOwner) {}
        viewModel.dateRecheckVitalsNeeded.observe(viewLifecycleOwner) {}

        view.findViewById<Button>(R.id.save_reading_button).setOnClickListener {
            it.dismissKeyboard()
            viewModel.setInputEnabledState(false)

            lifecycleScope.launch {
                when (viewModel.save()) {
                    ReadingFlowSaveResult.SAVE_SUCCESSFUL -> {
                        Toast.makeText(
                            view.context,
                            "This is when we would save and close",
                            Toast.LENGTH_LONG
                        ).show()
                        activity?.finish()
                    }
                    ReadingFlowSaveResult.REFERRAL_REQUIRED -> {
                        launchReferralDialog()
                    }
                    ReadingFlowSaveResult.ERROR -> {
                        Toast.makeText(view.context, "Failed to save", Toast.LENGTH_LONG).show()
                    }
                }
            }
        }
    }

    private fun launchReferralDialog() {
        ReferralDialogFragment().show(parentFragmentManager, "referral_dialog")
    }

    private fun setupCurrentReadingSummaryLayout(
        view: View,
        currentReading: Reading,
        retestGroup: RetestGroup
    ) {
        check(retestGroup.size >= 1)
        check(retestGroup.readings.last().id == currentReading.id)

        val currentReadingLayout =
            view.findViewById<LinearLayout>(R.id.current_reading_summary_linear_layout) ?: return
        if (currentReadingLayout.size != 0) {
            currentReadingLayout.removeAllViews()
        }

        val binding = DataBindingUtil.inflate<ListPreviousReadingsItemBinding>(
            LayoutInflater.from(view.context) /* inflater */,
            R.layout.list_previous_readings_item /* layoutId */,
            currentReadingLayout /* parent layout */,
            false /* attachToParent */,
            dataBindingComponent
        )
        binding.reading = retestGroup.readings.last()
        binding.analysis = retestGroup.mostRecentReadingAnalysis
        currentReadingLayout.addView(binding.root)
    }

    private fun setupPreviousRetestGroupLayout(
        view: View,
        currentReading: Reading,
        retestGroup: RetestGroup
    ) {
        val previousReadingsLayout = view.findViewById<LinearLayout>(
            R.id.previous_readings_linear_layout
        ) ?: return

        if (previousReadingsLayout.size != 0) {
            previousReadingsLayout.removeAllViews()
        }

        val areThereNoPreviousReadings = retestGroup.size <= 1
        val visibility = if (areThereNoPreviousReadings) View.GONE else View.VISIBLE
        view.run {
            findViewById<TextView>(R.id.previous_readings_text_view)?.visibility = visibility
            findViewById<LinearLayout>(R.id.previous_readings_linear_layout)?.visibility =
                visibility
        }
        if (areThereNoPreviousReadings) {
            // We only want to show "Previous readings for patient" if they have previous readings.
            return
        }

        for (i in 0 until retestGroup.size) {
            val reading = retestGroup.readings[i]
            // Skip the most recent reading
            if (reading.id != currentReading.id && reading != currentReading) {
                val analysis = retestGroup.analyses[i]
                val binding = DataBindingUtil.inflate<ListPreviousReadingsItemBinding>(
                    LayoutInflater.from(view.context) /* inflater */,
                    R.layout.list_previous_readings_item /* layoutId */,
                    previousReadingsLayout /* parent layout */,
                    false /* attachToParent */,
                    dataBindingComponent
                )
                binding.reading = reading
                binding.analysis = analysis
                previousReadingsLayout.addView(binding.root)
            }
        }
    }
}
