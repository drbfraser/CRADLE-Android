package com.cradle.neptune.view.ui.reading

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.core.view.size
import androidx.databinding.DataBindingComponent
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.observe
import com.cradle.neptune.R
import com.cradle.neptune.binding.FragmentDataBindingComponent
import com.cradle.neptune.databinding.FragmentAdviceBinding
import com.cradle.neptune.databinding.ListPreviousReadingsItemBinding
import com.cradle.neptune.model.Reading
import com.cradle.neptune.model.RetestGroup
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class AdviceFragment : BaseFragment() {

    private val dataBindingComponent: DataBindingComponent = FragmentDataBindingComponent()

    // The name "FragmentSymptomsBinding" is generated by the Data Binding library.
    private var binding: FragmentAdviceBinding? = null

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = DataBindingUtil.inflate(
            inflater,
            R.layout.fragment_advice,
            container,
            false,
            dataBindingComponent
        )
        return binding?.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        binding?.lifecycleOwner = viewLifecycleOwner
        binding?.viewModel = viewModel
        super.onViewCreated(view, savedInstanceState)

        viewModel.currentValidPatientAndRetestGroup.observe(viewLifecycleOwner) {
            it ?: return@observe

            setupCurrentReadingSummaryLayout(view, it.first, it.second)
            setupPreviousRetestGroupLayout(view, it.first, it.second)
        }
    }

    private fun setupCurrentReadingSummaryLayout(
        view: View,
        currentReading: Reading,
        retestGroup: RetestGroup
    ) {
        check(retestGroup.size >= 1)
        val currentReadingLayout =
            view.findViewById<LinearLayout>(R.id.current_reading_summary_linear_layout) ?: return
        if (currentReadingLayout.size != 0) {
            currentReadingLayout.removeAllViews()
        }

        val binding = DataBindingUtil.inflate<ListPreviousReadingsItemBinding>(
            LayoutInflater.from(view.context) /* inflater */,
            R.layout.list_previous_readings_item /* layoutId */,
            currentReadingLayout /* parent layout */,
            false /* attachToParent */,
            dataBindingComponent
        )
        binding.reading = currentReading
        binding.analysis = retestGroup.mostRecentReadingAnalysis
        currentReadingLayout.addView(binding.root)
    }

    private fun setupPreviousRetestGroupLayout(
        view: View,
        currentReading: Reading,
        retestGroup: RetestGroup
    ) {
        val previousReadingsLayout = view.findViewById<LinearLayout>(
            R.id.previous_readings_linear_layout
        ) ?: return

        if (previousReadingsLayout.size != 0) {
            previousReadingsLayout.removeAllViews()
        }

        val areThereNoPreviousReadings = retestGroup.size <= 1
        val visibility = if (areThereNoPreviousReadings) View.GONE else View.VISIBLE
        view.run {
            findViewById<TextView>(R.id.previous_readings_text_view)?.visibility = visibility
            findViewById<LinearLayout>(R.id.previous_readings_linear_layout)?.visibility =
                visibility
        }
        if (areThereNoPreviousReadings) {
            // We only want to show "Previous readings for patient" if they have previous readings.
            return
        }

        for (i in 0 until retestGroup.size) {
            val reading = retestGroup.readings[i]
            // Skip the most recent reading
            if (reading.id != currentReading.id && reading != currentReading) {
                val analysis = retestGroup.analyses[i]
                val binding = DataBindingUtil.inflate<ListPreviousReadingsItemBinding>(
                    LayoutInflater.from(view.context) /* inflater */,
                    R.layout.list_previous_readings_item /* layoutId */,
                    previousReadingsLayout /* parent layout */,
                    false /* attachToParent */,
                    dataBindingComponent
                )
                binding.reading = reading
                binding.analysis = analysis
                previousReadingsLayout.addView(binding.root)
            }
        }
    }
}
