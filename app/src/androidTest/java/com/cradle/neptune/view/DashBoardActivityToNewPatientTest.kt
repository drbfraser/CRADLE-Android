package com.cradle.neptune.view

import android.view.View
import android.view.ViewGroup
import androidx.core.content.ContextCompat.startActivity
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.action.ViewActions.closeSoftKeyboard
import androidx.test.espresso.action.ViewActions.replaceText
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.isDisplayed
import androidx.test.espresso.matcher.ViewMatchers.isEnabled
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.espresso.matcher.ViewMatchers.withParent
import androidx.test.espresso.matcher.ViewMatchers.withText
import androidx.test.ext.junit.rules.activityScenarioRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.LargeTest
import androidx.test.rule.GrantPermissionRule
import com.cradle.neptune.R
import org.hamcrest.Description
import org.hamcrest.Matcher
import org.hamcrest.Matchers.allOf
import org.hamcrest.Matchers.not
import org.hamcrest.TypeSafeMatcher
import org.hamcrest.core.IsInstanceOf
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@LargeTest
@RunWith(AndroidJUnit4::class)
class DashBoardActivityToNewPatientTest {

    @get:Rule
    var activityScenarioRule = activityScenarioRule<DashBoardActivity>()

    @Rule
    @JvmField
    val mGrantPermissionRule: GrantPermissionRule =
        GrantPermissionRule.grant(
            "android.permission.INTERNET",
            "android.permission.ACCESS_NETWORK_STATE",
            "android.permission.CAMERA",
            "android.permission.WRITE_EXTERNAL_STORAGE"
        )

    @Test
    fun readingActivity_addBadPatientInfo() {
        val scenario = activityScenarioRule.scenario
        scenario.onActivity { activity ->
            val intent = ReadingActivity.makeIntentForNewReading(activity)
            startActivity(activity, intent, null)
        }

        //Generated by test recorder
        /*
        val textInputEditText = onView(
            allOf(
                withId(R.id.emailEditText),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("androidx.cardview.widget.CardView")),
                        0
                    ),
                    4
                ),
                isDisplayed()
            )
        )
        textInputEditText.perform(replaceText("vht@vht.com"), closeSoftKeyboard())

        val textInputEditText2 = onView(
            allOf(
                withId(R.id.passwordEditText),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("androidx.cardview.widget.CardView")),
                        0
                    ),
                    5
                ),
                isDisplayed()
            )
        )
        textInputEditText2.perform(replaceText("vht123"), closeSoftKeyboard())

        val textInputEditText3 = onView(
            allOf(
                withId(R.id.passwordEditText), withText("vht123"),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("androidx.cardview.widget.CardView")),
                        0
                    ),
                    5
                ),
                isDisplayed()
            )
        )
        textInputEditText3.perform(pressImeActionButton())

        val materialButton = onView(
            allOf(
                withId(R.id.loginButton), withText("Go"),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("androidx.cardview.widget.CardView")),
                        0
                    ),
                    6
                ),
                isDisplayed()
            )
        )
        materialButton.perform(click())

        Thread.sleep(6000L)
        val appCompatImageView = onView(
            allOf(
                withId(R.id.ivNext),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("android.widget.LinearLayout")),
                        1
                    ),
                    1
                ),
                isDisplayed()
            )
        )
        appCompatImageView.perform(click())
        Thread.sleep(2000L)

        val appCompatImageView2 = onView(
            allOf(
                withId(R.id.ivNext),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("android.widget.LinearLayout")),
                        1
                    ),
                    1
                ),
                isDisplayed()
            )
        )
        appCompatImageView2.perform(click())

        Thread.sleep(2000L)

        val materialTextView = onView(
            allOf(
                withId(R.id.txtDone), withText("I ACCEPT"),
                childAtPosition(
                    childAtPosition(
                        withClassName(`is`("android.widget.LinearLayout")),
                        1
                    ),
                    3
                ),
                isDisplayed()
            )
        )
        materialTextView.perform(click())

        Thread.sleep(2000L)

        val cardView = onView(
            allOf(
                withId(R.id.readingCardView),
                childAtPosition(
                    allOf(
                        withId(R.id.readingConstraintLayout),
                        childAtPosition(
                            withClassName(`is`("androidx.constraintlayout.widget.ConstraintLayout")),
                            2
                        )
                    ),
                    0
                )
            )
        )
        cardView.perform(scrollTo(), click())

         */
        onView(withId(R.id.patient_name_text))
            .perform(click())
            .perform(replaceText("baad3"), closeSoftKeyboard())

        val textView = onView(
            allOf(
                withId(R.id.textinput_error), withText("Name must be characters"),
                withParent(withParent(IsInstanceOf.instanceOf(android.widget.LinearLayout::class.java))),
                isDisplayed()
            )
        )
        textView.check(matches(withText("Name must be characters")))

        onView(withId(R.id.patient_id_text))
            .perform(click())
            .perform(replaceText("114"), closeSoftKeyboard())
        Thread.sleep(1000L)
        onView(withId(R.id.patient_id_text))
            .perform(click())
            .perform(replaceText(""), closeSoftKeyboard())
        val textView2 = onView(
            allOf(
                withId(R.id.textinput_error), withText("Missing patient ID"),
                withParent(withParent(IsInstanceOf.instanceOf(android.widget.LinearLayout::class.java))),
                isDisplayed()
            )
        )
        textView2.check(matches(withText("Missing patient ID")))

        onView(withId(R.id.reading_next_button)).check(matches(not(isEnabled())))
    }

    /**
     * Generated by test recorder
     */
    private fun childAtPosition(
        parentMatcher: Matcher<View>, position: Int
    ): Matcher<View> {

        return object : TypeSafeMatcher<View>() {
            override fun describeTo(description: Description) {
                description.appendText("Child at position $position in parent ")
                parentMatcher.describeTo(description)
            }

            public override fun matchesSafely(view: View): Boolean {
                val parent = view.parent
                return parent is ViewGroup && parentMatcher.matches(parent)
                    && view == parent.getChildAt(position)
            }
        }
    }
}
